name: Publish Docker image

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      - apps/**
  pull_request:
    paths:
      - apps/**

env:
  REPOSITORY: ixsystems

jobs:
  lint:
    permissions:
      pull-requests: write
      contents: read
    name: Run Linters
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Run Hadolint
        uses: reviewdog/action-hadolint@fc7ee4a9f71e521bc43e370819247b70e5327540 # v1.50.2
        continue-on-error: true
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          fail_level: error
          filter_mode: diff_context
      - name: Run ShellCheck
        uses: reviewdog/action-shellcheck@5ebd09ddbe2ebb471646ce234c6c8dd18663ca7c # v1.30.0
        continue-on-error: true
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          fail_level: error
          filter_mode: diff_context

  build:
    permissions:
      packages: write
      contents: read
    name: Build
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        containers:
          - app: tftpd-hpa
          - app: rsyncd
          - app: postgres-upgrade
          - app: nextcloud-fpm
          - app: nextcloud-notify-push

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            apps/${{ matrix.containers.app }}/**

      # TODO: We should later look into getting the changed files before the matrix
      # and generate a matrix based on the changed files.
      - name: Detect changes
        id: detect_changes
        shell: bash
        run: |
          if [ -n "${{ steps.changed-files.outputs.all_changed_files }}" ]; then
            echo "Changes detected, proceeding with build."
            echo "skip=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "No changes detected, skipping build."
          echo "skip=true" >> $GITHUB_OUTPUT

      # Login first so we can pull the manifest
      # even if the repository is private
      - name: Login to DockerHub
        if: steps.detect_changes.outputs.skip == 'false'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Prepare
        if: steps.detect_changes.outputs.skip == 'false'
        id: prepare
        shell: bash
        run: |
          # Grab the version from the VERSION file
          if [ -f ./apps/${{ matrix.containers.app }}/get_version.sh ]; then
            if [ ! -x ./apps/${{ matrix.containers.app }}/get_version.sh ]; then
              echo "get_version.sh is not executable, please check the permissions."
              exit 1
            fi
            VERSION=$(./apps/${{ matrix.containers.app }}/get_version.sh ./apps/${{ matrix.containers.app }})
          else
            VERSION=$(cat ./apps/${{ matrix.containers.app }}/VERSION)
          fi
          echo "Version: $VERSION"

          result=$(docker manifest inspect "${{ env.REPOSITORY }}/${{ matrix.containers.app }}:$VERSION" || echo 1)

          # Result contains 1 if the tag does not exist or a JSON object if it does.
          # If the result is not 1, means the "production" tag exists.
          # We should fail the build and ask for a version bump.
          if [[ "$result" != 1 ]]; then
            echo "Version $VERSION already exists, please bump the version in the VERSION file."
            exit 1
          fi

          echo "Version $VERSION does not exist, proceeding with build."
          # Initialize the output
          OUTPUT_VERSION="$VERSION"

          # If this is a pull request, append the PR number
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            OUTPUT_VERSION="unstable"
          fi

          echo "Final version: $OUTPUT_VERSION"

          # Set the output
          echo "APP_VERSION=$OUTPUT_VERSION" >> $GITHUB_OUTPUT

      - name: Build and push Docker images
        if: ${{ steps.detect_changes.outputs.skip == 'false' && steps.prepare.outputs.APP_VERSION != '' }}
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          context: apps/${{ matrix.containers.app }}/
          push: true
          tags: |
            ${{ env.REPOSITORY }}/${{ matrix.containers.app }}:${{ steps.prepare.outputs.APP_VERSION }}
